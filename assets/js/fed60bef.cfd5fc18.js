"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3211],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),r=n(67294),i=n(86010),o=n(12466),l=n(70989),s=n(72389);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function c(e){var t=e.className,n=e.block,l=e.selectedValue,s=e.selectValue,c=e.tabValues,p=[],d=(0,o.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==l&&(d(t),s(a))},h=function(e){var t,n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,r=p.indexOf(e.currentTarget)+1;n=null!=(a=p[r])?a:p[0];break;case"ArrowLeft":var i,o=p.indexOf(e.currentTarget)-1;n=null!=(i=p[o])?i:p[p.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return p.push(e)},onKeyDown:h,onClick:m},o,{className:(0,i.Z)("tabs__item",u.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=n?n:t)})))}function p(e){var t=e.lazy,n=e.children,a=e.selectedValue,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var o=i.find((function(e){return e.props.value===a}));return o?(0,r.cloneElement)(o,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function d(e){var t=(0,l.Y)(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",u.tabList)},r.createElement(c,(0,a.Z)({},e,t)),r.createElement(p,(0,a.Z)({},e,t)))}function m(e){var t=(0,s.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},70989:(e,t,n)=>{n.d(t,{Y:()=>d});var a=n(67294),r=n(16550),i=n(91980),o=n(67392),l=n(50012);function s(e){return function(e){var t,n;return null!=(t=null==(n=a.Children.map(e,(function(e){if(!e||(0,a.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function u(e){var t=e.values,n=e.children;return(0,a.useMemo)((function(){var e=null!=t?t:s(n);return function(e){var t=(0,o.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function c(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function p(e){var t=e.queryString,n=void 0!==t&&t,o=e.groupId,l=(0,r.k6)(),s=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:o});return[(0,i._X)(s),(0,a.useCallback)((function(e){if(s){var t=new URLSearchParams(l.location.search);t.set(s,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[s,l])]}function d(e){var t,n,r,i,o=e.defaultValue,s=e.queryString,d=void 0!==s&&s,m=e.groupId,h=u(e),f=(0,a.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:h})})),w=f[0],k=f[1],g=p({queryString:d,groupId:m}),y=g[0],v=g[1],b=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:m}.groupId),n=(0,l.Nk)(t),r=n[0],i=n[1],[r,(0,a.useCallback)((function(e){t&&i.set(e)}),[t,i])]),q=b[0],C=b[1],N=function(){var e=null!=y?y:q;return c({value:e,tabValues:h})?e:null}();return(0,a.useLayoutEffect)((function(){N&&k(N)}),[N]),{selectedValue:w,selectValue:(0,a.useCallback)((function(e){if(!c({value:e,tabValues:h}))throw new Error("Can't select invalid tab value="+e);k(e),v(e),C(e)}),[v,C,h]),tabValues:h}}},14959:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(67294),r=n(39960),i=n(74477),o=n(52263),l=n(50643).version.split("."),s=[l[0],l[1]].join(".");const u=function(e){var t=e.to,n=e.children,l=(0,i.E)();return(0,o.default)().siteConfig.presets[0][1].docs.disableVersioning||l.version===s?a.createElement(r.default,{to:"/api/"+t},n):a.createElement(r.default,{to:"/api/"+("current"===l.version?"next":l.version)+"/"+t},n)}},54346:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>w,default:()=>q,frontMatter:()=>f,metadata:()=>k,toc:()=>y});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=n(14959),l=n(65488),s=n(85162),u=n(41435);const c="import { CheerioCrawler } from 'crawlee';\n\nconst crawler = new CheerioCrawler({\n    // Let's limit our crawls to make our\n    // tests shorter and safer.\n    maxRequestsPerCrawl: 20,\n    // enqueueLinks is an argument of the requestHandler\n    async requestHandler({ $, request, enqueueLinks }) {\n        const title = $('title').text();\n        console.log(`The title of \"${request.url}\" is: ${title}.`);\n        // The enqueueLinks function is context aware,\n        // so it does not require any parameters.\n        await enqueueLinks();\n    },\n});\n\nawait crawler.run(['https://crawlee.dev']);\n",p="import { CheerioCrawler } from 'crawlee';\n\nconst crawler = new CheerioCrawler({\n    maxRequestsPerCrawl: 20,\n    async requestHandler({ $, request, enqueueLinks }) {\n        const title = $('title').text();\n        console.log(`The title of \"${request.url}\" is: ${title}.`);\n        await enqueueLinks();\n    },\n});\n\nawait crawler.run(['https://crawlee.dev']);\n",d="import { CheerioCrawler } from 'crawlee';\nimport { URL } from 'node:url';\n\nconst crawler = new CheerioCrawler({\n    // Let's limit our crawls to make our\n    // tests shorter and safer.\n    maxRequestsPerCrawl: 20,\n    async requestHandler({ request, $ }) {\n        const title = $('title').text();\n        console.log(`The title of \"${request.url}\" is: ${title}.`);\n\n        const links = $('a[href]')\n            .map((_, el) => $(el).attr('href'))\n            .get();\n\n        // Besides resolving the URLs, we now also need to\n        // grab their hostname for filtering.\n        const { hostname } = new URL(request.loadedUrl);\n        const absoluteUrls = links\n            .map((link) => new URL(link, request.loadedUrl));\n\n        // We use the hostname to filter links that point\n        // to a different domain, even subdomain.\n        const sameHostnameLinks = absoluteUrls\n            .filter((url) => url.hostname === hostname)\n            .map((url) => ({ url: url.href }));\n\n        // Finally, we have to add the URLs to the queue\n        await crawler.addRequests(sameHostnameLinks);\n    },\n});\n\nawait crawler.run(['https://crawlee.dev']);\n",m="import { CheerioCrawler } from 'crawlee';\nimport { URL } from 'node:url';\n\nconst crawler = new CheerioCrawler({\n    maxRequestsPerCrawl: 20,\n    async requestHandler({ request, $ }) {\n        const title = $('title').text();\n        console.log(`The title of \"${request.url}\" is: ${title}.`);\n\n        // Without enqueueLinks, we first have to extract all\n        // the URLs from the page with Cheerio.\n        const links = $('a[href]')\n            .map((_, el) => $(el).attr('href'))\n            .get();\n\n        // Then we need to resolve relative URLs,\n        // otherwise they would be unusable for crawling.\n        const absoluteUrls = links\n            .map((link) => new URL(link, request.loadedUrl).href);\n\n        // Finally, we have to add the URLs to the queue\n        await crawler.addRequests(absoluteUrls);\n    },\n});\n\nawait crawler.run(['https://crawlee.dev']);\n";var h=["components"],f={id:"adding-urls",title:"Adding more URLs",description:"Your first steps into the world of scraping with Crawlee"},w=void 0,k={unversionedId:"introduction/adding-urls",id:"version-3.2/introduction/adding-urls",title:"Adding more URLs",description:"Your first steps into the world of scraping with Crawlee",source:"@site/versioned_docs/version-3.2/introduction/03-adding-urls.mdx",sourceDirName:"introduction",slug:"/introduction/adding-urls",permalink:"/docs/3.2/introduction/adding-urls",draft:!1,tags:[],version:"3.2",lastUpdatedBy:"renovate[bot]",lastUpdatedAt:1682566928,formattedLastUpdatedAt:"Apr 27, 2023",sidebarPosition:3,frontMatter:{id:"adding-urls",title:"Adding more URLs",description:"Your first steps into the world of scraping with Crawlee"},sidebar:"docs",previous:{title:"First crawler",permalink:"/docs/3.2/introduction/first-crawler"},next:{title:"Real-world project",permalink:"/docs/3.2/introduction/real-world-project"}},g={},y=[{value:"How crawling works",id:"how-crawling-works",level:2},{value:"Limit your crawls with <code>maxRequestsPerCrawl</code>",id:"limit-your-crawls-with-maxrequestspercrawl",level:2},{value:"Finding new links",id:"finding-new-links",level:2},{value:"Filtering links to same domain",id:"filtering-links-to-same-domain",level:2},{value:"Skipping duplicate URLs",id:"skipping-duplicate-urls",level:2},{value:"Advanced filtering arguments",id:"advanced-filtering-arguments",level:2},{value:"Filter URLs with patterns",id:"filter-urls-with-patterns",level:3},{value:"Transform requests",id:"transform-requests",level:3},{value:"Next lesson",id:"next-lesson",level:2}],v={toc:y},b="wrapper";function q(e){var t=e.components,n=(0,r.Z)(e,h);return(0,i.kt)(b,(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the previous lesson you built a very simple crawler that downloads HTML of a single page, reads its title and prints\nit to the console. This is the original source code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { CheerioCrawler } from 'crawlee';\n\nconst crawler = new CheerioCrawler({\n    async requestHandler({ $, request }) {\n        const title = $('title').text();\n        console.log(`The title of \"${request.url}\" is: ${title}.`);\n    }\n})\n\nawait crawler.run(['https://crawlee.dev']);\n")),(0,i.kt)("p",null,"In this lesson you'll use the example from the previous section and improve on it. You'll add more URLs to the queue and thanks to that the crawler will keep going, finding new links, enqueuing them into the ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestQueue")," and then scraping them."),(0,i.kt)("h2",{id:"how-crawling-works"},"How crawling works"),(0,i.kt)("p",null,"The process is simple:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Find new links on the page."),(0,i.kt)("li",{parentName:"ol"},"Filter only those pointing to the same domain, in this case ",(0,i.kt)("inlineCode",{parentName:"li"},"crawlee.dev"),"."),(0,i.kt)("li",{parentName:"ol"},"Enqueue (add) them to the ",(0,i.kt)("inlineCode",{parentName:"li"},"RequestQueue"),"."),(0,i.kt)("li",{parentName:"ol"},"Visit the newly enqueued links."),(0,i.kt)("li",{parentName:"ol"},"Repeat the process.")),(0,i.kt)("p",null,"In the following paragraphs you will learn about the ",(0,i.kt)(o.Z,{to:"core/function/enqueueLinks",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks"))," function which simplifies crawling to a single function call. For comparison and learning purposes we will show an equivalent solution written without ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks")," in the second code tab."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks")," function is context aware. It means that it will read the information about the currently crawled page from the context, and you don't need to explicitly provide any arguments. It will find the links using the Cheerio function ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," and automatically add the links to the running crawler's ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestQueue"),".")),(0,i.kt)("h2",{id:"limit-your-crawls-with-maxrequestspercrawl"},"Limit your crawls with ",(0,i.kt)("inlineCode",{parentName:"h2"},"maxRequestsPerCrawl")),(0,i.kt)("p",null," When you're just testing your code or when your crawler could potentially find millions of links, it's very useful to set a maximum limit of crawled pages. The option is called ",(0,i.kt)("inlineCode",{parentName:"p"},"maxRequestsPerCrawl"),", is available in all crawlers, and you can set it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const crawler = new CheerioCrawler({\n    maxRequestsPerCrawl: 20,\n    // ...\n});\n")),(0,i.kt)("p",null,"This means that no new requests will be started after the 20th request is finished. The actual number of processed requests might be a little higher thanks to parallelization, because the running requests won't be forcefully aborted. It's not even possible in most cases."),(0,i.kt)("h2",{id:"finding-new-links"},"Finding new links"),(0,i.kt)("p",null,"There are numerous approaches to finding links to follow when crawling the web. For our purposes, we will be looking for ",(0,i.kt)("inlineCode",{parentName:"p"},"<a>")," elements that contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," attribute because that's what you need in most cases. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<a href="https://crawlee.dev/docs/introduction">This is a link to Crawlee introduction</a>\n')),(0,i.kt)("p",null,"Since this is the most common case, it is also the ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks")," default."),(0,i.kt)(l.Z,{groupId:"crawling-links",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"enqueue-links",label:"with enqueueLinks",default:!0,mdxType:"TabItem"},(0,i.kt)(u.Z,{language:"js",title:"src/main.mjs",mdxType:"CodeBlock"},c)),(0,i.kt)(s.Z,{value:"plain-js",label:"without enqueueLinks",mdxType:"TabItem"},(0,i.kt)(u.Z,{language:"js",title:"src/main.mjs",mdxType:"CodeBlock"},d))),(0,i.kt)("p",null,"If you need to override the default selection of elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks"),", you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"selector")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await enqueueLinks({\n    selector: 'div.has-link'\n});\n")),(0,i.kt)("h2",{id:"filtering-links-to-same-domain"},"Filtering links to same domain"),(0,i.kt)("p",null,"Websites typically contain a lot of links that lead away from the original page. This is normal, but when crawling a website, we usually want to crawl that one site and not let our crawler wander away to Google, Facebook and Twitter. Therefore, we need to filter out the off-domain links and only keep the ones that lead to the same domain."),(0,i.kt)(l.Z,{groupId:"crawling-links",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"enqueue-links",label:"with enqueueLinks",default:!0,mdxType:"TabItem"},(0,i.kt)(u.Z,{language:"js",title:"src/main.mjs",mdxType:"CodeBlock"},p)),(0,i.kt)(s.Z,{value:"plain-js",label:"without enqueueLinks",mdxType:"TabItem"},(0,i.kt)(u.Z,{language:"js",title:"src/main.mjs",mdxType:"CodeBlock"},m))),(0,i.kt)("p",null,"The default behavior of ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks")," is to stay on the same hostname. This ",(0,i.kt)("strong",{parentName:"p"},"does not include subdomains"),". To include subdomains in your crawl, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"strategy")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await enqueueLinks({\n    strategy: 'same-domain'\n});\n")),(0,i.kt)("p",null,"When you run the code, you will see the crawler  log the ",(0,i.kt)("strong",{parentName:"p"},"title")," of the first page, then the ",(0,i.kt)("strong",{parentName:"p"},"enqueueing")," message showing number of URLs, followed by the ",(0,i.kt)("strong",{parentName:"p"},"title")," of the first enqueued page and so on and so on."),(0,i.kt)("h2",{id:"skipping-duplicate-urls"},"Skipping duplicate URLs"),(0,i.kt)("p",null,"Skipping of duplicate URLs is critical, because visiting the same page multiple times would lead to duplicate results. This is automatically handled by the ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestQueue")," which deduplicates requests using their ",(0,i.kt)("inlineCode",{parentName:"p"},"uniqueKey"),". This ",(0,i.kt)("inlineCode",{parentName:"p"},"uniqueKey")," is automatically generated from the request's URL by lowercasing the URL, lexically ordering query parameters, removing fragments and a few other tweaks that ensure the queue only includes unique URLs."),(0,i.kt)("h2",{id:"advanced-filtering-arguments"},"Advanced filtering arguments"),(0,i.kt)("p",null,"While the defaults for ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks")," can be often exactly what you need, it also gives you fine-grained control over which URLs should be enqueued. One way we already mentioned above is by using the ",(0,i.kt)(o.Z,{to:"core/enum/EnqueueStrategy",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"EnqueueStrategy")),". You can use the ",(0,i.kt)(o.Z,{to:"core/enum/EnqueueStrategy#All",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"All"))," strategy if you want to follow every single link, regardless of its domain, or you can enqueue links that target the same domain name with the ",(0,i.kt)(o.Z,{to:"core/enum/EnqueueStrategy#SameDomain",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"SameDomain"))," strategy."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await enqueueLinks({\n    strategy: 'all', // wander the internet\n});\n")),(0,i.kt)("h3",{id:"filter-urls-with-patterns"},"Filter URLs with patterns"),(0,i.kt)("p",null,"For even more control, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"globs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"regexps")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pseudoUrls")," to filter the URLs. Each of those arguments is always an ",(0,i.kt)("inlineCode",{parentName:"p"},"Array"),", but the contents can take on many forms. ",(0,i.kt)(o.Z,{to:"core/interface/EnqueueLinksOptions",mdxType:"ApiLink"},"See the reference")," for more information about them as well as other options."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If you provide one of those options, the default ",(0,i.kt)("inlineCode",{parentName:"p"},"same-hostname")," strategy will ",(0,i.kt)("strong",{parentName:"p"},"not")," be applied unless explicitly set in the options.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await enqueueLinks({\n    globs: ['http?(s)://apify.com/*/*'],\n});\n")),(0,i.kt)("h3",{id:"transform-requests"},"Transform requests"),(0,i.kt)("p",null,"To have absolute control, we have the ",(0,i.kt)(o.Z,{to:"core/interface/EnqueueLinksOptions/#transformRequestFunction",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"transformRequestFunction")),". Just before a new ",(0,i.kt)(o.Z,{to:"core/class/Request",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"Request"))," is constructed and enqueued to the ",(0,i.kt)(o.Z,{to:"core/class/RequestQueue",mdxType:"ApiLink"},(0,i.kt)("inlineCode",{parentName:"p"},"RequestQueue")),", this function can be used to skip it or modify its contents such as ",(0,i.kt)("inlineCode",{parentName:"p"},"userData"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," or, most importantly, ",(0,i.kt)("inlineCode",{parentName:"p"},"uniqueKey"),". This is useful when you need to enqueue multiple requests to the queue, and these requests share the same URL, but differ in methods or payloads. Another use case is to dynamically update or create the ",(0,i.kt)("inlineCode",{parentName:"p"},"userData"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await enqueueLinks({\n    globs: ['http?(s)://apify.com/*/*'],\n    transformRequestFunction(req) {\n        // ignore all links ending with `.pdf`\n        if (req.url.endsWith('.pdf')) return false;\n        return req;\n    },\n});\n")),(0,i.kt)("p",null,"And that's it! ",(0,i.kt)("inlineCode",{parentName:"p"},"enqueueLinks()")," is just one example of Crawlee's powerful helper functions. They're all designed to make your life easier, so you can focus on getting your data, while leaving the mundane crawling management to the tools."),(0,i.kt)("h2",{id:"next-lesson"},"Next lesson"),(0,i.kt)("p",null,"In the next lesson you will start your project of scraping a production website and learn some more Crawlee tricks in the process."))}q.isMDXComponent=!0},50643:e=>{e.exports=JSON.parse('{"name":"crawlee","version":"3.3.1","description":"The scalable web crawling and scraping library for JavaScript/Node.js. Enables development of data extraction and web automation jobs (not only) with headless Chrome and Puppeteer.","engines":{"node":">=16.0.0"},"bin":"./src/cli.ts","main":"./dist/index.js","module":"./dist/index.mjs","types":"./dist/index.d.ts","exports":{".":{"import":"./dist/index.mjs","require":"./dist/index.js","types":"./dist/index.d.ts"},"./package.json":"./package.json"},"keywords":["apify","headless","chrome","puppeteer","crawler","scraper"],"author":{"name":"Apify","email":"support@apify.com","url":"https://apify.com"},"contributors":["Jan Curn <jan@apify.com>","Marek Trunkat <marek@apify.com>","Ondra Urban <ondra@apify.com>"],"license":"Apache-2.0","repository":{"type":"git","url":"git+https://github.com/apify/crawlee"},"bugs":{"url":"https://github.com/apify/crawlee/issues"},"homepage":"https://crawlee.dev","scripts":{"build":"yarn clean && yarn compile && yarn copy","clean":"rimraf ./dist","compile":"tsc -p tsconfig.build.json && gen-esm-wrapper ./dist/index.js ./dist/index.mjs","copy":"ts-node -T ../../scripts/copy.ts"},"publishConfig":{"access":"public"},"dependencies":{"@crawlee/basic":"^3.3.1","@crawlee/browser":"^3.3.1","@crawlee/cheerio":"^3.3.1","@crawlee/cli":"^3.3.1","@crawlee/core":"^3.3.1","@crawlee/http":"^3.3.1","@crawlee/jsdom":"^3.3.1","@crawlee/playwright":"^3.3.1","@crawlee/puppeteer":"^3.3.1","@crawlee/utils":"^3.3.1","import-local":"^3.1.0","tslib":"^2.4.0"},"peerDependencies":{"playwright":"<= 2.x","puppeteer":"<= 19.x"},"peerDependenciesMeta":{"playwright":{"optional":true},"puppeteer":{"optional":true}}}')}}]);